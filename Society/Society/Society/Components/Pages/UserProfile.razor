@page "/userprofile"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Profile</PageTitle>

<div class="pagetitle">
    <h1>
        UserProfile
    </h1>
</div>

@if (user == null || user.Name == "")
{
    <div class="loading">Loading...</div>
}
else{
    <div class="profilelist">

        <div class="profilecontainer">

            <b>Feed</b>
            <div class="innerprofilecontainer">

                <div class="profilenamecontainer">
                    <div class="profilename"><b>Name: </b>@user.Name</div>
                    <div class="profileimage"><b>Imagecontainer</b><br />@user.Image</div>
                </div>
                <div class="profiledescription"><b>Description: </b><p>@user.Description</p></div>
            </div>
            <div style="display: flex; flex-direction: row; margin:0 20px">
                <button style="margin-top: 10px; display: inline-block; width: 50%; margin-right: 5px;">Add friend</button>
                <button style="margin-top: 10px; display: inline-block; width: 50%; margin-left: 5px;">Remove friend</button>
            </div>
        </div>
        <div class="friendlistcontainer" style="">
            <b>Messages</b><input type="text" placeholder="Write a message" style="margin: 20px; margin-top: 0;" /><div class="innerfriendlistcontainer" style="overflow: auto;">
                @foreach (var friend in user.Friends)
                {
                    <div class="friendcontainer">
                        <div class="friendimage"><b>{Name}<br />Img</b><!--@friend.UserFriend.Image--></div>
                        <div class="friendname" style="text-align: left;"><b></b> contentcontentcontentbreak content contentcontent content content</div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    private User? user = new();
    string? userguid;
    private HttpResponseMessage response = new();

    private async Task ClickFriend(string friendId)
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshList();
            StateHasChanged();
        }
    }

    private async Task RefreshList()
    {
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/" + profileGuid);
        user = JsonConvert.DeserializeObject<User>(await response.Content.ReadAsStringAsync()) ?? new User();
        httpClient.Dispose();
    }
}