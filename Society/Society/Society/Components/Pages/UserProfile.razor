@page "/userprofile"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Profile</PageTitle>

<div class="pagetitle">
    <h1>
        UserProfile
    </h1>
</div>

@if (user == null || user.Name == "")
{
    <div class="loading">Loading...</div>
}
else{
    <div class="userlist">
        <div class="usercontainer">
            <div class="usernamecontainer">
                <div class="username"><b>Name: </b>@user.Name</div>
                <div class="userimage"><b>Imagecontainer</b><br />@user.Image</div>
            </div>
            <div class="userdescription"><b>Description: </b><p>@user.Description</p></div>
        </div>
    </div>
}


@code {
    private User? user = new();
    string? userguid;
    private HttpResponseMessage response = new();

    private async Task ClickFriend(string friendId)
    {
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/" + friendId);
        user = JsonConvert.DeserializeObject<User>(await response.Content.ReadAsStringAsync()) ?? new User();
        httpClient.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshList();
            StateHasChanged();
        }
    }

    private async Task RefreshList()
    {
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/" + profileGuid);
        user = JsonConvert.DeserializeObject<User>(await response.Content.ReadAsStringAsync()) ?? new User();
        httpClient.Dispose();
    }
}