@page "/userlist"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Userlist</PageTitle>

<div class="pagetitle">
    <h1>
        Userlist
    </h1>
    <!--<button @onclick="RefreshButton">Magic</button>-->
</div>


@if (users == null || !users.Any())
{
    <div class="loading">Loading...</div>
}
else
{
    <div class="userlist">
        @foreach (var user in users)
        {
            <div class="usercontainer" style="display: flex;flex-direction: column;">

                <div style="" class="innerusercontainer">
                    <div class="usernamecontainer">
                        <div class="username"><b>Name: </b>@user.Name</div>
                        <div class="userimage"><b>Imagecontainer</b><br />@user.Image</div>
                    </div>
                    <div class="userdescription"><b>Description: </b><p>@user.Description</p></div>
                </div>

                <div style="width: 100%; display: flex;flex-direction: row;" class="innerusercontainer2">
                    <button class="dashedborder" style="width: 100%;" @onclick="(() => ClickUser(user.Id.ToString()))">Show profile</button>
                </div>

            </div>
            
        }
    </div>
}

@code {
    private HttpResponseMessage response = new();
    private IEnumerable<User>? users = new List<User>();
    private User? user = new();

    private void ClickUser(string userId)
    {
        profileGuid = userId;

        NavManager.NavigateTo("/userprofile");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshList();
            StateHasChanged();
        }
    }

    private async Task RefreshButton()
    {
        users = new List<User>();
        await RefreshList();
    }

    private async Task RefreshList()
    {
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/");
        if (response.IsSuccessStatusCode)
        {
            users = JsonConvert.DeserializeObject<IEnumerable<User>>(await response.Content.ReadAsStringAsync()) ?? new List<User>();
        }
        else
        {
            // exception to show in frontend
        }
        httpClient.Dispose();
    }
}