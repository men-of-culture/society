@page "/myprofile"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Profile</PageTitle>

<div class="pagetitle">
    <h1>
        Profile
    </h1>
</div>

@if (userguid == null && (user == null || user.Name == ""))
{
    <div class="loading">Loading...</div>
}
else if (userguid != null && (user == null || user.Name == ""))
{
    <div class="loading">Invalid login</div>
}
else if (user != null && user.Name != "")
{
    <div class="profilelist">
        
            <div class="profilecontainer">

            <b>Feed</b>
                <div class="innerprofilecontainer">

                    <div class="profilenamecontainer">
                        <div class="profilename"><b>Name: </b>@user.Name</div>
                        <div class="profileimage"><b>Imagecontainer</b><br />@user.Image</div>
                    </div>
                <div class="profiledescription"><b>Description: </b><p>@user.Description</p></div>
            </div>
            <div style="display:flex;flex-direction:row;">
                <input type="text" placeholder="Got something interesting to say?" style="width: 100%;border: 2px black dashed;margin: 10px; margin-left: 20px;" />
                <button style="border: 2px black dashed;margin: 10px 20px 10px 0 !important;">Send</button>
            </div>
            <div class="feedcontainer" style="width: 100%; height: 100%; /*! margin: 20px; */ border-top: 2px black dashed;display: block;margin-top: 10px;padding: 0 20px;padding-bottom: 20px;">

                <!--Remove chunk when implemented-->
                @foreach (var friend in user.Friends)
                {
                    <div class="feedpost" style="background-color: rgba(200, 200, 200, 0.5);display: flex; flex-direction: column;border: 2px black dashed; width: 100%; /*! margin: 0 20px; */height: auto;/*! margin: 20px; */margin-top: 20px;">
                        <div class="feedpostheader" style="border-bottom: 2px dashed black; display: flex;"><b>Name</b><b style="width: 100%; ">Feedpost</b><b>Time</b></div>
                        <div style="padding: 10px;height: 100%; background-color: rgba(200, 200, 200, 0.5);background-color: white;">
                            <p style="text-align: left;">Today i started a new job at yadayada some stuff about daily life i want to share yadayada yadayada yadayada yadayada yadayada yadayada yadayada yadayada yadayada yadayada yadayada yadayada yadayada </p>
                        </div>
                        <button style="padding: 0; border: none;border-top: 2px black dashed;height: auto; width: 100%; background-color: rgba(200, 200, 200, 0.5);">Comments</button>
                    </div>
                }
                <!--Remove chunk when implemented-->

            </div>
        </div>
            <div class="friendlistcontainer">
            <b>Friendlist</b><div class="innerfriendlistcontainer" style="overflow: auto;">
                @foreach (var friend in user.Friends)
                {
                    <div class="friendcontainer" @onclick="(() => ClickFriend(friend.UserFriend.Id.ToString()))">
                    <div class="friendimage"><b>Img</b><!--@friend.UserFriend.Image--></div>
                        <div class="friendname" style="align-items: center;"><b>Name: </b>@friend.UserFriend.Name</div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private User? user = new();
    string? userguid;
    private HttpResponseMessage response = new();

    private void ClickFriend(string friendId)
    {
        profileGuid = friendId;

        NavManager.NavigateTo("/userprofile");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userguid = (await ProtectedSessionStore.GetAsync<string>("login")).Value;
            await RefreshList();
            StateHasChanged();
        }
    }

    private async Task RefreshList()
    {
        //if (myUser.Id.ToString() == userguid) return;
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/" + userguid);
        user = JsonConvert.DeserializeObject<User>(await response.Content.ReadAsStringAsync()) ?? new User();
        httpClient.Dispose();
    }
}