@page "/myprofile"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Profile</PageTitle>

<div class="pagetitle">
    <h1>
        Profile
    </h1>
</div>

@if (userguid == null && (myUser == null || myUser.Name == ""))
{
    <div class="loading">Loading...</div>
}
else if (userguid != null && (myUser == null || myUser.Name == ""))
{
    <div class="loading">Invalid login</div>
}
else if (myUser != null && myUser.Name != "")
{
    <div class="userlist">
        <div class="usercontainer">
            <div class="usernamecontainer">
                <div class="username"><b>Name: </b>@myUser.Name</div>
                <div class="userimage"><b>Imagecontainer</b><br />@myUser.Image</div>
            </div>
            <div class="userdescription"><b>Description: </b><p>@myUser.Description</p></div>
        </div>
        <div class="friendlistcontainer">
            <b>Friendlist</b>
            @foreach (var friend in myUser.Friends)
            {
                <button class="friendcontainer" @onclick="(() => ClickFriend(friend.UserFriend.Id.ToString()))">
                <div class="friendimage"><b>Imagecontainer</b><br />@friend.UserFriend.Image</div>
                <div class="friendname"><b>Name: </b>@friend.UserFriend.Name</div>
                </button>
            }
        </div>
    </div>
}

@code {
    private User? user = new();
    string? userguid;
    private HttpResponseMessage response = new();

    private void ClickFriend(string friendId)
    {
        profileGuid = friendId;

        NavManager.NavigateTo("/userprofile");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userguid = (await ProtectedSessionStore.GetAsync<string>("login")).Value;
            await RefreshList();
            StateHasChanged();
        }
    }

    private async Task RefreshList()
    {
        if (myUser.Id.ToString() == userguid) return;
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/" + userguid);
        myUser = JsonConvert.DeserializeObject<User>(await response.Content.ReadAsStringAsync()) ?? new User();
        httpClient.Dispose();
    }
}