@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject Society.Components.SharedPageVariables.AppState AppState

@{
    AppState.LoggedIn = false;
}

<PageTitle>Login</PageTitle>
<div style="display: flex; flex-direction: column;">
    <div style="display: flex; justify-content: space-between; flex-direction: row;">
        <p style="width: 80px; height: 55px; background-color: black; color: white; display: flex; align-items: center; justify-content: center; padding-left: 5px;">Society</p>
        <h1 style="margin: 0;" class="pagetitle">Login</h1>
        <p style="width: 80px; height: 55px; background-color: black; color: white; display: flex; align-items: center; justify-content: center; padding-left: 5px;"></p>
    </div>
    <div class="content">
        <input type="text" placeholder="Enter user GUID" id="input" @bind-value="@input" />
        <button @onclick="SetLogin">Login</button>
        <button @onclick="RandomProfile">Random</button>
    </div>
</div>

@code {
    private string input = "";
    private User? user;
    private IEnumerable<User>? users;
    private HttpResponseMessage response = new();

    async Task SetLogin()
    {
        // make input check and prompt if invalid (spaces or periods)
        if (Regex.IsMatch(input, @"^[a-zA-Z0-9_]+$"))
        {
            await ProtectedSessionStore.SetAsync("login", input);
        }
        else
        {
            await ProtectedSessionStore.SetAsync("login", "invalid");
        }
        NavManager.NavigateTo("/myprofile");
    }

    async Task RandomProfile()
    {
        // get random user guid
        HttpClient httpClient = new HttpClient();
        response = await httpClient.GetAsync(API_URL + "api/User/");
        users = JsonConvert.DeserializeObject<IEnumerable<User>>(await response.Content.ReadAsStringAsync()) ?? new List<User>();
        httpClient.Dispose();

        user = users?.FirstOrDefault();
        if (user is not null)
        {
            input = user.Id.ToString();
        }

        // make input check and prompt if invalid (spaces or periods)
        await ProtectedSessionStore.SetAsync("login", input);
        NavManager.NavigateTo("/myprofile");
    }
}