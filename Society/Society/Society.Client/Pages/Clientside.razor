@page "/clientside"
@rendermode InteractiveAuto

<PageTitle>Client side</PageTitle>

<h1>Client-side</h1>

<p role="status">Current count: @currentCount</p>

<button @ref=ButtonRef class="@myButtonClass" @onclick="ClickButton">Click me</button>

<style>
    .red-button {
        color: #fff;
        background-color: #ff140c;
        border-color: #1861ac;
    }

    .blue-button {
        color: #fff;
        background-color: #0066ff;
        border-color: #1861ac;
    }
</style>

@code {
    // fields
    string myButtonClass = "";
    static string redButtonClass = "red-button";
    static string blueButtonClass = "blue-button";

    ElementReference ButtonRef; // not sure how we can use this

    private int currentCount = 0;

    // methods
    private void ClickButton() // Bound to the button on line 10 "onclick"
    {
        if (myButtonClass == redButtonClass) // Change from blue to red and vice versa
        {
            myButtonClass = blueButtonClass;
        }
        else
        {
            myButtonClass = redButtonClass;
        }

        currentCount++; // This value is bound to the html on line 8, so updating this value will force a rerender of that text component
    }

    void DummyMethod()
    {
        myButtonClass = redButtonClass; // This value is bound to the button on line 10, defining its current class, so changing this value will force a rerender of the button component
    }

    protected override void OnAfterRender(bool firstRender) // When a component is done rendering
    {
        if (firstRender) // Only run this code the very first time the component is rendered, and ignore on further rerenders
        {
            DummyMethod();
            StateHasChanged(); // Runs automatically when a component/variable is updated by a method EXCEPT the method OnAfterRender due to looping, so we call it on demand
        }
    }
}
